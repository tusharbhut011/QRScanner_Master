<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xunit.DependencyInjection</name>
    </assembly>
    <members>
        <member name="T:Xunit.DependencyInjection.BeforeAfterTest">
            <summary>
            Base attribute which indicates a test method interception (allows code to be run before and
            after the test is run).
            </summary>
        </member>
        <member name="M:Xunit.DependencyInjection.BeforeAfterTest.After(System.Object,System.Reflection.MethodInfo)">
            <summary>
            This method is called after the test method is executed.
            </summary>
            <param name="testClassInstance">The instance of test class</param>
            <param name="methodUnderTest">The method under test</param>
        </member>
        <member name="M:Xunit.DependencyInjection.BeforeAfterTest.AfterAsync(System.Object,System.Reflection.MethodInfo)">
            <summary>
            This method is called after the test method is executed.
            </summary>
            <param name="testClassInstance">The instance of test class</param>
            <param name="methodUnderTest">The method under test</param>
        </member>
        <member name="M:Xunit.DependencyInjection.BeforeAfterTest.Before(System.Object,System.Reflection.MethodInfo)">
            <summary>
            This method is called before the test method is executed.
            </summary>
            <param name="testClassInstance">The instance of test class</param>
            <param name="methodUnderTest">The method under test</param>
        </member>
        <member name="M:Xunit.DependencyInjection.BeforeAfterTest.BeforeAsync(System.Object,System.Reflection.MethodInfo)">
            <summary>
            This method is called before the test method is executed.
            </summary>
            <param name="testClassInstance">The instance of test class</param>
            <param name="methodUnderTest">The method under test</param>
        </member>
        <member name="T:Xunit.DependencyInjection.ContextValue`1.ValueHolder">
            <summary>See <see href="https://github.com/dotnet/aspnetcore/blob/main/src/Http/Http/src/HttpContextAccessor.cs">HttpContextAccessor</see></summary>
        </member>
        <member name="M:Xunit.DependencyInjection.DependencyInjectionTestAssemblyRunner.RunTestCollectionAsync(Xunit.Sdk.IMessageBus,Xunit.Abstractions.ITestCollection,System.Collections.Generic.IEnumerable{Xunit.Sdk.IXunitTestCase},System.Threading.CancellationTokenSource)">
            <inheritdoc />
        </member>
        <member name="M:Xunit.DependencyInjection.DependencyInjectionTestAssemblyRunner.RunTestCollectionsAsync(Xunit.Sdk.IMessageBus,System.Threading.CancellationTokenSource)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.DependencyInjection.DependencyInjectionTestCaseRunner.RunTestAsync">
            <inheritdoc />
        </member>
        <member name="P:Xunit.DependencyInjection.DependencyInjectionTestCaseRunnerWrapper.TestCaseType">
            <inheritdoc />
        </member>
        <member name="M:Xunit.DependencyInjection.DependencyInjectionTestCaseRunnerWrapper.RunAsync(Xunit.Sdk.IXunitTestCase,Xunit.DependencyInjection.DependencyInjectionContext,Xunit.Abstractions.IMessageSink,Xunit.Sdk.IMessageBus,System.Object[],Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)">
            <inheritdoc />
        </member>
        <member name="M:Xunit.DependencyInjection.DependencyInjectionTestClassRunner.CreateTestClassConstructorArguments">
            <inheritdoc />
        </member>
        <member name="M:Xunit.DependencyInjection.DependencyInjectionTestClassRunner.TryGetConstructorArgument(System.Reflection.ConstructorInfo,System.Int32,System.Reflection.ParameterInfo,System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:Xunit.DependencyInjection.DependencyInjectionTestClassRunner.CreateClassFixture(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Xunit.DependencyInjection.DependencyInjectionTestClassRunner.BeforeTestClassFinishedAsync">
            <inheritdoc />
        </member>
        <member name="M:Xunit.DependencyInjection.DependencyInjectionTestClassRunner.RunTestMethodAsync(Xunit.Abstractions.ITestMethod,Xunit.Abstractions.IReflectionMethodInfo,System.Collections.Generic.IEnumerable{Xunit.Sdk.IXunitTestCase},System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Xunit.DependencyInjection.DependencyInjectionTestCollectionRunner.CreateCollectionFixture(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Xunit.DependencyInjection.DependencyInjectionTestCollectionRunner.BeforeTestCollectionFinishedAsync">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.DependencyInjection.DependencyInjectionTestCollectionRunner.RunTestClassAsync(Xunit.Abstractions.ITestClass,Xunit.Abstractions.IReflectionTypeInfo,System.Collections.Generic.IEnumerable{Xunit.Sdk.IXunitTestCase})">
            <inheritdoc />
        </member>
        <member name="M:Xunit.DependencyInjection.DependencyInjectionTestFrameworkExecutor.RunTestCases(System.Collections.Generic.IEnumerable{Xunit.Sdk.IXunitTestCase},Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkExecutionOptions)">
            <inheritdoc />
        </member>
        <member name="M:Xunit.DependencyInjection.DependencyInjectionTestInvoker.InvokeTestMethodAsync(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.DependencyInjection.DependencyInjectionTestInvoker.CallTestMethod(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Xunit.DependencyInjection.DependencyInjectionTestMethodRunner.RunTestCaseAsync(Xunit.Sdk.IXunitTestCase)">
            <inheritdoc />
        </member>
        <member name="M:Xunit.DependencyInjection.DependencyInjectionTestRunner.InvokeTestAsync(Xunit.Sdk.ExceptionAggregator)">
            <inheritdoc />
        </member>
        <member name="M:Xunit.DependencyInjection.DependencyInjectionTheoryTestCaseRunner.AfterTestCaseStartingAsync">
            <inheritdoc />
        </member>
        <member name="P:Xunit.DependencyInjection.DependencyInjectionTheoryTestCaseRunnerWrapper.TestCaseType">
            <inheritdoc />
        </member>
        <member name="M:Xunit.DependencyInjection.DependencyInjectionTheoryTestCaseRunnerWrapper.RunAsync(Xunit.Sdk.IXunitTestCase,Xunit.DependencyInjection.DependencyInjectionContext,Xunit.Abstractions.IMessageSink,Xunit.Sdk.IMessageBus,System.Object[],Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)">
            <inheritdoc />
        </member>
        <member name="T:Xunit.DependencyInjection.ITestClassOrderer">
            <summary>
            A class implements this interface to participate in ordering tests for the test runner.
            </summary>
        </member>
        <member name="M:Xunit.DependencyInjection.ITestClassOrderer.OrderTestClasses(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestClass})">
            <summary>
            Orders test cases for execution.
            </summary>
            <param name="testCases">The test cases to be ordered.</param>
            <returns>The test cases in the order to be run.</returns>
        </member>
        <member name="P:Xunit.DependencyInjection.IXunitTestCaseRunnerWrapper.TestCaseType">
            <summary>
            Support type.
            </summary>
        </member>
        <member name="M:Xunit.DependencyInjection.IXunitTestCaseRunnerWrapper.RunAsync(Xunit.Sdk.IXunitTestCase,Xunit.DependencyInjection.DependencyInjectionContext,Xunit.Abstractions.IMessageSink,Xunit.Sdk.IMessageBus,System.Object[],Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)">
            <summary>
            Executes the test case, returning 0 or more result messages through the message sink.
            </summary>
            <param name="testCase">Test case.</param>
            <param name="context">The dependency injection context.</param>
            <param name="diagnosticMessageSink">The message sink used to send diagnostic messages to.</param>
            <param name="messageBus">The message bus to report results to.</param>
            <param name="constructorArguments">The arguments to pass to the constructor.</param>
            <param name="aggregator">The error aggregator to use for catching exception.</param>
            <param name="cancellationTokenSource">The cancellation token source that indicates whether cancellation has been requested.</param>
            <returns>Returns the summary of the test case run.</returns>
        </member>
        <member name="T:Xunit.DependencyInjection.MethodDataAttribute">
            <summary>
            Provides a data source for a data theory.
            The member must return something compatible with IEnumerable&lt;object[]&gt; with the test data.
            </summary>
            <param name="methodName">The name of the public method on the test class that will provide the test data</param>
            <param name="parameters">The parameters for the method</param>
        </member>
        <member name="M:Xunit.DependencyInjection.MethodDataAttribute.#ctor(System.String,System.Object[])">
            <summary>
            Provides a data source for a data theory.
            The member must return something compatible with IEnumerable&lt;object[]&gt; with the test data.
            </summary>
            <param name="methodName">The name of the public method on the test class that will provide the test data</param>
            <param name="parameters">The parameters for the method</param>
        </member>
        <member name="P:Xunit.DependencyInjection.MethodDataAttribute.MethodName">
            <summary>
            Gets the method name.
            </summary>
        </member>
        <member name="P:Xunit.DependencyInjection.MethodDataAttribute.Parameters">
            <summary>
            Gets or sets the parameters passed to the member. Only supported for static methods.
            </summary>
        </member>
        <member name="P:Xunit.DependencyInjection.MethodDataAttribute.ClassType">
            <summary>
            Gets the type of the class that provides the data.
            </summary>
        </member>
        <member name="M:Xunit.DependencyInjection.MethodDataAttribute.#ctor(System.String,System.Type,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.DependencyInjection.MethodDataAttribute" /> class.
            </summary>
            <param name="methodName">The name of the public method on the test class that will provide the test data</param>
            <param name="classType">The class that provides the data.</param>
            <param name="parameters">The parameters for the method</param>
        </member>
        <member name="M:Xunit.DependencyInjection.MethodDataAttribute.GetData(System.Reflection.MethodInfo)">
            <inheritdoc />
        </member>
        <member name="P:Xunit.DependencyInjection.StartupAttribute.Shared">
            <summary>Default is true. If false, an isolated Startup will be created for the test class.</summary>
        </member>
        <member name="M:Xunit.DependencyInjection.StartupTypeAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes an instance of <see cref="T:Xunit.DependencyInjection.StartupTypeAttribute" />.
            </summary>
            <param name="typeName">The fully qualified type name of the startup
            (f.e., 'Xunit.DependencyInjection.Test.Startup')</param>
            <param name="assemblyName">The name of the assembly that the startup type
            is located in, without file extension (f.e., 'Xunit.DependencyInjection.Test')</param>
        </member>
        <member name="M:Xunit.DependencyInjection.StartupTypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes an instance of <see cref="T:Xunit.DependencyInjection.StartupTypeAttribute" />.
            </summary>
            <param name="startupType">The fully qualified type name of the startup type
            (f.e., 'Xunit.DependencyInjection.Test.Startup')</param>
        </member>
        <member name="M:Microsoft.Extensions.Internal.ObjectMethodExecutor.Execute(System.Object,System.Object[])">
            <summary>
            Executes the configured method on <paramref name="target"/>. This can be used whether or not
            the configured method is asynchronous.
            </summary>
            <remarks>
            Even if the target method is asynchronous, it's desirable to invoke it using Execute rather than
            ExecuteAsync if you know at compile time what the return type is, because then you can directly
            "await" that value (via a cast), and then the generated code will be able to reference the
            resulting awaitable as a value-typed variable. If you use ExecuteAsync instead, the generated
            code will have to treat the resulting awaitable as a boxed object, because it doesn't know at
            compile time what type it would be.
            </remarks>
            <param name="target">The object whose method is to be executed.</param>
            <param name="parameters">Parameters to pass to the method.</param>
            <returns>The method return value.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Internal.ObjectMethodExecutor.ExecuteAsync(System.Object,System.Object[])">
             <summary>
             Executes the configured method on <paramref name="target"/>. This can only be used if the configured
             method is asynchronous.
             </summary>
             <remarks>
             If you don't know at compile time the type of the method's returned awaitable, you can use ExecuteAsync,
             which supplies an awaitable-of-object. This always works, but can incur several extra heap allocations
             as compared with using Execute and then using "await" on the result value typecasted to the known
             awaitable type. The possible extra heap allocations are for:
            
             1. The custom awaitable (though usually there's a heap allocation for this anyway, since normally
                it's a reference type, and you normally create a new instance per call).
             2. The custom awaiter (whether or not it's a value type, since if it's not, you need a new instance
                of it, and if it is, it will have to be boxed so the calling code can reference it as an object).
             3. The async result value, if it's a value type (it has to be boxed as an object, since the calling
                code doesn't know what type it's going to be).
             </remarks>
             <param name="target">The object whose method is to be executed.</param>
             <param name="parameters">Parameters to pass to the method.</param>
             <returns>An object that you can "await" to get the method return value.</returns>
        </member>
        <member name="T:Microsoft.Extensions.Internal.ObjectMethodExecutorAwaitable">
            <summary>
            Provides a common awaitable structure that <see cref="M:Microsoft.Extensions.Internal.ObjectMethodExecutor.ExecuteAsync(System.Object,System.Object[])"/> can
            return, regardless of whether the underlying value is a System.Task, an FSharpAsync, or an
            application-defined custom awaitable.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Internal.ObjectMethodExecutorAwaitable.#ctor(System.Object,System.Func{System.Object,System.Object},System.Func{System.Object,System.Boolean},System.Func{System.Object,System.Object},System.Action{System.Object,System.Action},System.Action{System.Object,System.Action})">
            <summary>
            Provides a common awaitable structure that <see cref="M:Microsoft.Extensions.Internal.ObjectMethodExecutor.ExecuteAsync(System.Object,System.Object[])"/> can
            return, regardless of whether the underlying value is a System.Task, an FSharpAsync, or an
            application-defined custom awaitable.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.Internal.ObjectMethodExecutorFSharpSupport">
            <summary>
            Helper for detecting whether a given type is FSharpAsync`1, and if so, supplying
            an <see cref="T:System.Linq.Expressions.Expression"/> for mapping instances of that type to a C# awaitable.
            </summary>
            <remarks>
            The main design goal here is to avoid taking a compile-time dependency on
            FSharp.Core.dll, because non-F# applications wouldn't use it. So all the references
            to FSharp types have to be constructed dynamically at runtime.
            </remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute">
            <summary>
            Indicates that the specified method parameter expects a constant.
            </summary>
            <remarks>
            This can be used to inform tooling that a constant should be used as an argument for the annotated parameter.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute.Min">
            <summary>
            Indicates the minimum bound of the expected constant, inclusive.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute.Max">
            <summary>
            Indicates the maximum bound of the expected constant, inclusive.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute">
            <summary>
            Indicates that an API is experimental and it may change in the future.
            </summary>
            <remarks>
            This attribute allows call sites to be flagged with a diagnostic that indicates that an experimental
            feature is used. Authors can use this attribute to ship preview features in their assemblies.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute"/> class,
            specifying the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <param name="diagnosticId">The ID that the compiler will use when reporting a use of the API the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.DiagnosticId">
            <summary>
            Gets the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <value>The unique diagnostic ID.</value>
            <remarks>
            The diagnostic ID is shown in build output for warnings and errors.
            <para>This property represents the unique ID that can be used to suppress the warnings or errors, if needed.</para>
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.UrlFormat">
            <summary>
            Gets or sets the URL for corresponding documentation.
            The API accepts a format string instead of an actual URL, creating a generic URL that includes the diagnostic ID.
            </summary>
            <value>The format string that represents a URL to corresponding documentation.</value>
            <remarks>An example format string is <c>https://contoso.com/obsoletion-warnings/{0}</c>.</remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property members have not-null values.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with a field or property member.
            </summary>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
            Initializes the attribute with the list of field and property members.
            </summary>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property
            members have not-null values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes the attribute with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes the attribute with the specified return value condition and list of field and property members.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>
            Specifies the syntax used in a string.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>
            Used to indicate a byref escapes and is not scoped.
            </summary>
            <remarks>
            <para>
            There are several cases where the C# compiler treats a <see langword="ref"/> as implicitly
            <see langword="scoped"/> - where the compiler does not allow the <see langword="ref"/> to escape the method.
            </para>
            <para>
            For example:
            <list type="number">
                <item><see langword="this"/> for <see langword="struct"/> instance methods.</item>
                <item><see langword="ref"/> parameters that refer to <see langword="ref"/> <see langword="struct"/> types.</item>
                <item><see langword="out"/> parameters.</item>
            </list>
            </para>
            <para>
            This attribute is used in those instances where the <see langword="ref"/> should be allowed to escape.
            </para>
            <para>
            Applying this attribute, in any form, has impact on consumers of the applicable API. It is necessary for
            API authors to understand the lifetime implications of applying this attribute and how it may impact their users.
            </para>
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>
            An attribute that allows parameters to receive the expression of other parameters.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute"/> class.
            </summary>
            <param name="parameterName">The condition parameter value.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>
            Gets the parameter name the expression is retrieved from.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CollectionBuilderAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initialize the attribute to refer to the <paramref name="methodName"/> method on the <paramref name="builderType"/> type.
            </summary>
            <param name="builderType">The type of the builder to use to construct the collection.</param>
            <param name="methodName">The name of the method on the builder to use to construct the collection.</param>
            <remarks>
            <paramref name="methodName"/> must refer to a static method that accepts a single parameter of
            type <see cref="T:System.ReadOnlySpan`1"/> and returns an instance of the collection being built containing
            a copy of the data from that span.  In future releases of .NET, additional patterns may be supported.
            </remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.BuilderType">
            <summary>
            Gets the type of the builder to use to construct the collection.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.MethodName">
            <summary>
            Gets the name of the method on the builder to use to construct the collection.
            </summary>
            <remarks>
            This should match the metadata name of the target method.
            For example, this might be ".ctor" if targeting the type's constructor.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute"/> type.
            </summary>
            <param name="featureName">The name of the feature to indicate.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>
            The name of the compiler feature.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            If true, the compiler can choose to allow access to the location where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the ref structs C# feature.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the required members C# feature.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="argument">The name of the argument that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="arguments">The names of the arguments that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.Arguments">
            <summary>
            Gets the names of the arguments that should be passed to the handler.
            </summary>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute">
            <summary>
            Indicates the attributed type is to be used as an interpolated string handler.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ModuleInitializerAttribute">
             <summary>
             Used to indicate to the compiler that a method should be called
             in its containing module's initializer.
             </summary>
             <remarks>
             When one or more valid methods
             with this attribute are found in a compilation, the compiler will
             emit a module initializer which calls each of the attributed methods.
            
             Certain requirements are imposed on any method targeted with this attribute:
             - The method must be `static`.
             - The method must be an ordinary member method, as opposed to a property accessor, constructor, local function, etc.
             - The method must be parameterless.
             - The method must return `void`.
             - The method must not be generic or be contained in a generic type.
             - The method's effective accessibility must be `internal` or `public`.
            
             The specification for module initializers in the .NET runtime can be found here:
             https://github.com/dotnet/runtime/blob/main/docs/design/specs/Ecma-335-Augments.md#module-initializer
             </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute">
            <summary>
            Specifies the priority of a member in overload resolution. When unspecified, the default priority is 0.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute"/> class.
            </summary>
            <param name="priority">The priority of the attributed member. Higher numbers are prioritized, lower numbers are deprioritized. 0 is the default if no attribute is present.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.Priority">
            <summary>
            The priority of the member.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ParamCollectionAttribute">
            <summary>
            Indicates that a method will allow a variable number of arguments in its invocation.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>
            Specifies that a type has required members or that a member is required.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Used to indicate to the compiler that the <c>.locals init</c> flag should not be set in method headers.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class with the specified message.
            </summary>
            <param name="message">An optional message associated with this attribute instance.</param>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Message">
            <summary>
            Returns the optional message associated with this attribute instance.
            </summary>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Url">
            <summary>
            Returns the optional URL associated with this attribute instance.
            </summary>
        </member>
    </members>
</doc>
