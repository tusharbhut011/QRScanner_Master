<?xml version="1.0" encoding="utf-8"?>
<root>
	<!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</resheader>
  -->
	<xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
		<xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
		<xsd:element name="root" msdata:IsDataSet="true">
			<xsd:complexType>
				<xsd:choice maxOccurs="unbounded">
					<xsd:element name="metadata">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" />
							</xsd:sequence>
							<xsd:attribute name="name" use="required" type="xsd:string" />
							<xsd:attribute name="type" type="xsd:string" />
							<xsd:attribute name="mimetype" type="xsd:string" />
							<xsd:attribute ref="xml:space" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="assembly">
						<xsd:complexType>
							<xsd:attribute name="alias" type="xsd:string" />
							<xsd:attribute name="name" type="xsd:string" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="data">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
								<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
							<xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
							<xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
							<xsd:attribute ref="xml:space" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="resheader">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" />
						</xsd:complexType>
					</xsd:element>
				</xsd:choice>
			</xsd:complexType>
		</xsd:element>
	</xsd:schema>
	<resheader name="resmimetype">
		<value>text/microsoft-resx</value>
	</resheader>
	<resheader name="version">
		<value>2.0</value>
	</resheader>
	<resheader name="reader">
		<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<resheader name="writer">
		<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<data name="FormTitle" xml:space="preserve">
    <value>QR Scanner Service</value>
  </data>
	<data name="StartService" xml:space="preserve">
    <value>Start Service</value>
  </data>
	<data name="StopService" xml:space="preserve">
    <value>Stop Service</value>
  </data>
	<data name="AddWorkflow" xml:space="preserve">
    <value>Add Workflow</value>
  </data>
	<data name="PortName" xml:space="preserve">
    <value>Port Name</value>
  </data>
	<data name="BaudRate" xml:space="preserve">
    <value>Baud Rate</value>
  </data>
	<data name="Prefix" xml:space="preserve">
    <value>Prefix</value>
  </data>
	<data name="ExcelFile" xml:space="preserve">
    <value>Excel File</value>
  </data>
	<data name="InvalidBaudRate" xml:space="preserve">
    <value>Invalid baud rate value</value>
  </data>
	<data name="Error" xml:space="preserve">
    <value>Error</value>
  </data>
	<data name="ServiceStarted" xml:space="preserve">
    <value>Service started successfully</value>
  </data>
	<data name="ServiceStopped" xml:space="preserve">
    <value>Service stopped successfully</value>
  </data>
	<data name="ServiceStarted" xml:space="preserve">
    <value>Service started successfully</value>
  </data>
	<data name="StartServiceError" xml:space="preserve">
    <value>Error starting service: {0}</value>
  </data>
	<data name="StopServiceError" xml:space="preserve">
  <value>Error stopping service: {0}</value>
</data>
	<data name="EmptyPrefixOrFile" xml:space="preserve">
  <value>Prefix and Excel file cannot be empty</value>
</data>
	<data name="SelectExcelFile" xml:space="preserve">
  <value>Select Excel File</value>
</data>
</root>